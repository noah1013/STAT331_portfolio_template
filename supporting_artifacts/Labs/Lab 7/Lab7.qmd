---
title: "Lab 7"
author: "Noah Tobinsky"
format: 
  html:
    self-contained: true
    code-tools: true
    code-fold: true
execute: 
  echo: true
  error: true
  message: false
  warning: false
editor: visual
---

# Setup

```{r}
library("tidyverse")
library("here")
BlackfootFish <- read_csv(here("Week 7", "Lab 7", "BlackfootFish.csv"))

```

# Part 1 - **Summaries and Plots**

## Question 1 - **Summarizing Missing Data**

The measurements of each fish captured were taken by a Biologist on a raft. This lack of "laboratory setting" opens the door to the possibility of measurement errors.

-   What variable(s) have missing values present?

-   How many observations within each variable have missing values?

```{r}
BlackfootFish |> 
  select(
    where(~ sum(is.na(.x)) > 0)
  ) |>
  summarize(
    across(
      .cols = everything(),
      ~ sum(is.na(.x))
    )
  )

```

## Question 2 - **Visualizing Missing Data**

Unfortunately, these missing values are not for only one `year`, `trip`, or `section` of river.

Create a thoughtful visualization exploring the frequency of missing values across the different years, sections, and trips.

```{r}
BlackfootFish <- BlackfootFish |>
  mutate(
      trip = fct_recode(as.factor(trip), 
                               "Trip 1" = "1",
                               "Trip 2" = "2")
  )

```

```{r}

BlackfootFish |>
  group_by(year, trip, section) |>
  select(
    where(~ sum(is.na(.x)) > 0)
  ) |>
  summarize(
    across(
      .cols = everything(),
      ~ sum(is.na(.x))
    ), 
    .groups = 'drop'
  ) |>
  ggplot(mapping = aes(x = year, y = weight, color = section)) +
  geom_point() + 
  geom_segment(aes(yend = 0, xend = year)) +
  facet_wrap(trip ~ section) +
  labs(x = "Year", y = "Weight of Fish") +
  theme(legend.position="none")
```

# Part 2 - **Adjusting the Data (Function Writing)**

## Question 1 - Writing a Function

Let's transform the repeated process above into a `rescale_01()` function.

-   The function should take a single vector as its input.

-   The function should return the rescaled vector.

    ```{r}
    rescale_01 <- function(vector){
      stopifnot(is.numeric(vector), length(vector) > 1)
      rescaled_vector <- (vector - min(vector, na.rm = TRUE)) / 
                         (max(vector, na.rm = TRUE) - min(vector, na.rm = TRUE))
      return(rescaled_vector)
    }
    ```

## Question 2 - **Adding Stops**

Now, let's incorporate some checks into your function! Modify your previous code to create the following checks:

-   the function should stop if the input vector is not numeric

-   the function should stop if the length of the vector is not greater than 1

## Question 3 - **Performing a Simple Test**

First, test your function on the simple vector below. **Add code** that verifies the maximum of your rescaled vector is 1 and the minimum is 0!

```{r}
x <- c(1:85, NA)
x <- rescale_01(x)
max(x, na.rm = TRUE)
min(x, na.rm = TRUE)
```

## Question 4 - **Performing a More Difficult Test**

Next, let's test the function on the `length` column of the `BlackfootFish` dataset.

Make plots of the original values of `length` and the rescaled values of `length`. Output your plots **stacked vertically**, so the reader can confirm the only aspect that has changed is the scale.

```{r}
#| layout-nrow: 2
BlackfootFish |>
  ggplot(mapping = aes(x = length, color = "red", fill = "red")) + 
  geom_density(alpha = 0.3) +
  theme(legend.position = "none") + 
  labs(x = "Length of Fish", y = NULL)

BlackfootFish |>
  mutate(length = rescale_01(length)) |>
  ggplot(mapping = aes(x = length)) + 
  geom_density(alpha = 0.3, color = "blue", fill = "blue") +
  theme(legend.position = "none") +
  labs(x = "Rescaled Length of Fish", y = NULL)
```

## Question 5 - **Incorportaing Variables**

Suppose you would like to make a more general `rescale_column()` function that perform operations on any variable within a dataset. Ideally, your function would take a dataframe and a variable name as inputs and return a dataframe where the variable has been rescaled.

Create a `rescale_column()` that accepts two arguments:

1.  a dataframe

2.  the name(s) of the variable(s) to be rescaled

The body of the function should call the original `rescale_01()` function you wrote previously.

```{r}
rescale_column <- function(dataframe, columns){
  stopifnot(is.data.frame(dataframe))
  
  rescaled_dataframe <- dataframe |>
    mutate(
      across(
        .cols = {{columns}},
        ~ rescale_01(.x)
      )
    )
  return(rescaled_dataframe) 
}
```

## Question 6 - **Another Function Test**

Alright, now let's put your `rescale_column()` function to work! Use your `rescale_column()` function to rescale **both** the `length` and `weight` columns.

```{r}
BlackfootFish |>
  rescale_column(columns = c(length, weight))
```
