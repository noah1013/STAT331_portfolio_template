---
title: "STAT 331 Portfolio"
author: "Noah Tobinsky"
format: 
  html: 
    self-contained: true
layout: margin-left
editor: visual
execute: 
  eval: false
  echo: true
---

[**My Grade:**]{.underline} I believe my grade equivalent to course work evidenced below to be an **A-**.

[**Learning Objective Evidence:**]{.underline} In the code chunks below, provide code from a Lab or Challenge assignment where you believe you have demonstrated proficiency with the specified learning target. Be sure to specify **where** the code came from (e.g., Lab 4 Question 2).

## Working with Data

**WD-1: I can import data from a *variety* of formats (e.g., csv, xlsx, txt, etc.).**

`csv`

-   Lab 3, Question 1

```{r wd-1-csv}
library("here")
hiphop <- read_csv(here("hiphop.csv"))
```

`xlsx`

-   Practice Activity 4, Question 1

```{r wd-1-xlsx}
library("here")
library(readxl) 
military <- read_xlsx(here::here("data", 
                                 "gov_spending_per_capita.xlsx"), 
                      sheet = "Share of Govt. spending", 
                      skip = 7, 
                      n_max = 191)

```

`txt`

-   Practice Activity 5.2, Setup

```{r wd-1-txt}
library("here")
message <- read_csv(here::here("data", "scrambled_message.txt"))

```

**WD-2: I can select necessary columns from a dataset.**

-   Lab 3, Question 9

```{r wd-2}
hiphop_demographic <- hiphop_clean |> 
  distinct(subj, .keep_all = TRUE) |>
    select(sex, age, ethnic)
```

**WD-3: I can filter rows from a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

`numeric`

-   Lab 3, Question 14

```{r wd-3-numeric}
bieberDataset <- hiphop_clean |>
  distinct(subj, .keep_all = TRUE) |>
    filter(simple_ethnic == "white",
           sex == "Male",
           city >= 10000 & city <= 60000,
           age >= 17,
           age <= 23
           ) |> 
               select(c(subj, bieber)) |>
                  slice_max(bieber)
```

`character -- specifically a string`

-   Lab/ Challenge 9, Question 2

```{r wd-3-string}
allison_f <- stateNames |>
  filter(Name == "Allison",
         sex == "F")
```

`factor`

-   Lab 4, Question 3

```{r wd-3-factor}
avocado_major_regions |> 
  filter(year == 2017, type == "organic") |>
  summarize(region, `Total Volume`, Small_Hass,  Date) |>
  slice_max(Small_Hass) 
```

`date`

-   Practice Activity 5.1, Question 3

```{r wd-3-date}
suspects <- suspects |> 
  filter(!(wday(Time.Spotted, week_start = 1) %in% c(2, 4))) |>
  mutate(Weekday = wday(Time.Spotted, label = TRUE, week_start = 1))
```

**WD-4: I can modify existing variables and create new variables in a dataframe for a *variety* of data types (e.g., numeric, integer, character, factor, date).**

`numeric`

-   Lab 4, Question 6

```{r wd-4-numeric}
group_by(.data = avocado_california, region, type) |>
  summarise(Mean = mean(AveragePrice), .groups = 'drop') |>
  pivot_wider(names_from = type,
              values_from = Mean) |>
  mutate(difference = (organic - conventional)) |>
  arrange(-difference) |>
  ggplot(mapping = aes(x = region, y = difference, fill = region)) + 
    geom_bar(stat='identity') + 
    labs(x = "California Region",
         y = "Difference of Conventional and Organic Avocado Prices") + 
    coord_flip() +
    theme(legend.position = "none")
```

`character -- specifically a string`

-   Lab/ Challenge 8, make_phrase() - Test Your Function

```{r wd-4-string}
xmas2 <- xmas %>%
  mutate(Full.Phrase = pmap_chr(.l = list(Day,
                                          Day.in.Words,
                                          Gift.Item,
                                          Verb, 
                                          Adjective,
                                          Location),
                                .f = make_phrase)
         )
```

`factor`

-   Lab 3, Question 5

```{r wd-4-factor}

#Change all colums with datatype character to a factor
#Remove all NA values in the numPreferredArtists and numOverallArtists columns
hiphop_clean <- hiphop |> 
  mutate(
    across(.cols = c(word, subj, sex, ethnic), .fns = ~as_factor(.x)), 
    city = replace(city, city == 0, NA),
    county = replace(county, county == 0, NA)
  ) 

hiphop_clean
```

`date`

-   Practice Activity 5.1, Question 3

```{r wd-4-date}
suspects <- suspects |> 
  filter(!(wday(Time.Spotted, week_start = 1) %in% c(2, 4))) |>
  mutate(Weekday = wday(Time.Spotted, label = TRUE, week_start = 1))
```

**WD-5: I can use mutating joins to combine multiple dataframes.**

`left_join()`

-   Preview Activity 4, Question 1

```{r wd-5-left}

#Edited to add correct left join functionality
prof_info <- tibble(
  professor = c("Bodwin", 
                "Glanz", 
                "Robinson",
                "Theobold"),
  undergrad_school = c("Harvard", 
                       "Cal Poly",
                       "Winona State University",
                       "Colorado Mesa University"),
  grad_school = c("UNC", 
                  "Boston University", 
                  "University of Nebraska-Lincoln",
                  "Montana State University")
)

prof_course <- tibble(
  professor = c("Bodwin", "Robinson", "Theobold", "Carlton"),
  Stat_331 = c(TRUE, TRUE, TRUE, TRUE),
  Stat_330 = c(FALSE, TRUE, FALSE, FALSE),
  Stat_431 = c(TRUE, TRUE, TRUE, FALSE)
)

left_join(prof_course, prof_info)
```

`right_join()`

-   Preview Activity 4, Question 1

```{r wd-5-right}

prof_info <- tibble(
  professor = c("Bodwin", 
                "Glanz", 
                "Robinson",
                "Theobold"),
  undergrad_school = c("Harvard", 
                       "Cal Poly",
                       "Winona State University",
                       "Colorado Mesa University"),
  grad_school = c("UNC", 
                  "Boston University", 
                  "University of Nebraska-Lincoln",
                  "Montana State University")
)

prof_course <- tibble(
  professor = c("Bodwin", "Robinson", "Theobold", "Carlton"),
  Stat_331 = c(TRUE, TRUE, TRUE, TRUE),
  Stat_330 = c(FALSE, TRUE, FALSE, FALSE),
  Stat_431 = c(TRUE, TRUE, TRUE, FALSE)
)

right_join(prof_info, prof_course)
```

`inner_join()`

-   Challenge 4, Working with the CA Data and Plotting Data

```{r wd-5-inner}


#Filter dataset for the average price and avocados sold each month and year
avocado_california <- avocado_california |>
  group_by(Month, Year, region) |>
  summarize(region,
            Month,
            Year,
            AveragePrice = mean(AveragePrice),
            AverageTotalVolume = mean(`Total Volume`),
            AverageSmall = mean(Small_Hass),
            AverageLarge = mean(Large_Hass),
            AverageExtraLarge = mean(Extra_Large_Hass)) |>
  distinct(AveragePrice, .keep_all = TRUE)

#Join avocado data set and housing data set
avocado_california <- avocado_california |>
  #full_join(california_housing)
  inner_join(california_housing)
  
#Edited from initial submission to have better labeling
```

`full_join()`

-   Challenge 4, Working with the CA Data and Plotting Data

```{r wd-5-full}

#Filter dataset for the average price and avocados sold each month and year
avocado_california <- avocado_california |>
  group_by(Month, Year, region) |>
  summarize(region,
            Month,
            Year,
            AveragePrice = mean(AveragePrice),
            AverageTotalVolume = mean(`Total Volume`),
            AverageSmall = mean(Small_Hass),
            AverageLarge = mean(Large_Hass),
            AverageExtraLarge = mean(Extra_Large_Hass)) |>
  distinct(AveragePrice, .keep_all = TRUE)

#Join avocado data set and housing data set
avocado_california <- avocado_california |>
  full_join(california_housing)
  #inner_join(california_housing)
  
#Edited from initial submission to have better labeling
```

**WD-6: I can use filtering joins to filter rows from a dataframe.**

`semi_join()`

-   Lab 4, Question 6

```{r wd-6-semi}

california_regions <- tibble(region = c("LosAngeles",
                                         "SanDiego", 
                                         "Sacramento",
                                         "SanFrancisco"))

avocado_california <- avocado_clean |>
  semi_join(y = california_regions, by = "region") 

#Reference Link(s):
  # https://stackoverflow.com/questions/62140483/how-to-interpret-dplyr-message-summarise-regrouping-output-by-x-override
  # https://stackoverflow.com/questions/61068031/error-stat-count-can-only-have-an-x-or-y     -aesthetic
```

`anti_join()`

-   Lab 4, Question 5

```{r wd-6-anti}

#Get 5 metro regions with highest total sales of avocados
  anti_join(x = avocado_clean, y = majorRegions, by = "region") |>
  anti_join(y = minorRegions, by = "region") |>
  filter(region != "California", region != "TotalUS") |>
  group_by(region) |>
  summarize(AverageVolume = mean(`Total Volume`)) |>
  slice_max(order_by = AverageVolume, n = 5) |>
  mutate(region = as.character(region)) |>
  left_join( y = avocado_clean, by = "region") |>
  ggplot(mapping = aes(x = `Total Volume`, y = region, fill = region)) +
    geom_boxplot() + 
    labs(x = "Total Volume of Avocados Sold", y = "Metro Region")

```

**WD-7: I can pivot dataframes from long to wide and visa versa**

`pivot_longer()`

-   Lab 4, Question 7

```{r wd-7-long}

avocado_california |> 
  group_by(region, type) |>
  summarize(Total_Mean = mean(`Total Volume`),
            Small = mean(Small_Hass),
            Large = mean(Large_Hass),
            `Extra Large` = mean(`Extra_Large_Hass`),
            .groups = 'drop') |>
  pivot_longer(cols = Small:`Extra Large`, 
               names_to = "Avocado Size",
               values_to = "Mean Avocados Sold") |>
  ggplot(mapping = aes(x = region,
                       y = `Mean Avocados Sold`,
                       fill = fct(`Avocado Size`,
                                     levels = c("Small",
                                                "Large",
                                                "Extra Large")))) +
    geom_bar(stat = "identity", position = "fill") +
    facet_wrap(~ type) + 
    labs(x = "Region of CA", 
         y = "Proportion of Mean Avocados Sold",
         fill = "Avocado Size") +
    scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
    scale_fill_brewer(palette = "Paired") 

```

`pivot_wider()`

-   Lab 4, Question 6

```{r wd-7-wide}

group_by(.data = avocado_california, region, type) |>
  summarise(Mean = mean(AveragePrice), .groups = 'drop') |>
  pivot_wider(names_from = type,
              values_from = Mean) |>
  mutate(difference = (organic - conventional)) |>
  arrange(-difference) |>
  ggplot(mapping = aes(x = region, y = difference, fill = region)) + 
    geom_bar(stat='identity') + 
    labs(x = "California Region",
         y = "Difference of Conventional and Organic Avocado Prices") + 
    coord_flip() +
    theme(legend.position = "none")


#Reference Link(s):
  # https://stackoverflow.com/questions/62140483/how-to-interpret-dplyr-message-summarise-regrouping-output-by-x-override
  # https://stackoverflow.com/questions/61068031/error-stat-count-can-only-have-an-x-or-y     -aesthetic
```

## Reproducibility

**R-1: I can create professional looking, reproducible analyses using RStudio projects, Quarto documents, and the here package.**

I've done this in the following provided assignments:

-   **Lab/ Challenge 8** - I imported a csv file through dropbox and used the rest of the lab to manipulate and view data within the data set. I also was able to create functions and utilized iteration to mutate and create new data across the data set

-   **Lab/ Challenge 9** - I imported a data set from a csv file and filtered the data set for two separate scenarios. Using the data, I also created a linear model and obtained the regression line for said model. I also used the data to create organized tables to view the filtered data from.

**R-2: I can write well documented and tidy code.**

-   Example 1 - Lab 4, Question 4

```{r r-2-1}

avocado_clean |>
  select(-year) |>
  separate_wider_delim(cols = Date, delim = "-", names = c("Year", "Month", "Day")) |> 
  slice_max(`Total Volume`) |>
  summarize(Month, `Total Volume`)
```

-   Example 2 - Lab 3, Question 10

```{r r-2-2}

#Allows for unique data of each individual
unique_individuals <- hiphop_clean |>
  distinct(subj, .keep_all = TRUE)

#Plot 1 plots the enthicity of each individual in the data set
ggplot(data = unique_individuals) +
  geom_bar(mapping = aes(x = ethnic, fill = ethnic)) +
  labs(x = "Ethnicities of Individuals", y = "Total Count")

#Plot 2 plots side by side boxplots of the age of individuals besed on their sex
ggplot(data = unique_individuals, mapping = aes(x = sex, y = age)) +
  geom_boxplot()
```

**R-3: I can write robust programs that are resistant to changes in inputs.**

-   Example 1 - Lab 4, Question 4

```{r r-3-1}

avocado_clean |>
  select(-year) |>
  separate_wider_delim(cols = Date, delim = "-", names = c("Year", "Month", "Day")) |> 
  slice_max(`Total Volume`) |>
  summarize(Month, `Total Volume`)
```

-   Example 2 - Challenge 4, Importing and Cleaning CA Housing Data

```{r r-3-2}

california_housing <- read_csv(here("Week 4", "Lab 4", "CA_Housing.csv"))

california_housing <- california_housing |>
  pivot_longer(cols = LosAngeles:SanFrancisco,
               names_to = "region",
               values_to = "Housing Prices") |>
  mutate(Year = as.character(Year))

#Reference Link(s)
  #https://www.zillow.com/home-values/9/ca/

```

## Data Visualization & Summarization

**DVS-1: I can create visualizations for a *variety* of variable types (e.g., numeric, character, factor, date)**

`numeric variables`

-   Lab/Challenge 9, Question 8

```{r dvs-1-num}

allens |>
  group_by(Year, Name) |>
  summarize(`Births per Year` = sum(Count), 
            .groups = 'drop') |>
  ggplot(mapping = aes(x = Year, y = `Births per Year`, color = Name)) +
    geom_line() 
```

`numeric variables and categorical variables`

-   Lab 3, Question 10

```{r dvs-2-num-cat}

#Allows for unique data of each individual
unique_individuals <- hiphop_clean |>
  distinct(subj, .keep_all = TRUE)

#Plot 1 plots the enthicity of each individual in the data set
ggplot(data = unique_individuals) +
  geom_bar(mapping = aes(x = ethnic, fill = ethnic)) +
  labs(x = "Ethnicities of Individuals", y = "Total Count")

#Plot 2 plots side by side boxplots of the age of individuals besed on their sex
ggplot(data = unique_individuals, mapping = aes(x = sex, y = age)) +
  geom_boxplot()
```

`categorical variables`

-   Lab 4, Question 7

```{r dvs-2-cat}

avocado_california |> 
  group_by(region, type) |>
  summarize(Total_Mean = mean(`Total Volume`),
            Small = mean(Small_Hass),
            Large = mean(Large_Hass),
            `Extra Large` = mean(`Extra_Large_Hass`),
            .groups = 'drop') |>
  pivot_longer(cols = Small:`Extra Large`, 
               names_to = "Avocado Size",
               values_to = "Mean Avocados Sold") |>
  ggplot(mapping = aes(x = region,
                       y = `Mean Avocados Sold`,
                       fill = fct(`Avocado Size`,
                                     levels = c("Small",
                                                "Large",
                                                "Extra Large")))) +
    geom_bar(stat = "identity", position = "fill") +
    facet_wrap(~ type) + 
    labs(x = "Region of CA", 
         y = "Proportion of Mean Avocados Sold",
         fill = "Avocado Size") +
    scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
    scale_fill_brewer(palette = "Paired") 

#Reference Link(s):
  # https://stackoverflow.com/questions/47025828/change-the-order-of-stacked-fill-columns-in-ggplot2
  # https://stackoverflow.com/questions/72545463/how-to-expand-color-palette-in-ggplot2
```

`dates`

-   Lab 5, Time-Series, Question 4

```{r dvs-2-date}

surveys |>
  group_by(year, genus) |>
  summarize(Mean_Weight = mean(weight), .groups = 'drop') |>
  ggplot(mapping = aes(y = Mean_Weight, x = year, color = fct_reorder(genus, -Mean_Weight))) +
    geom_line() +
    labs(x = "Year", y = NULL, color = "Genus of Animal",
         title = "Mean Weights (Grams) for Each Animal's Genus per Year ", 
         subtitle = "Taken From the 'surveys' Data Set")

#Code revised using provided canvas observations
```

**DVS-2: I use plot modifications to make my visualization clear to the reader.**

-   Example 1 - Lab 4, Question 7

```{r dvs-2-1}
avocado_california |> 
  group_by(region, type) |>
  summarize(Total_Mean = mean(`Total Volume`),
            Small = mean(Small_Hass),
            Large = mean(Large_Hass),
            `Extra Large` = mean(`Extra_Large_Hass`),
            .groups = 'drop') |>
  pivot_longer(cols = Small:`Extra Large`, 
               names_to = "Avocado Size",
               values_to = "Mean Avocados Sold") |>
  ggplot(mapping = aes(x = region,
                       y = `Mean Avocados Sold`,
                       fill = fct(`Avocado Size`,
                                     levels = c("Small",
                                                "Large",
                                                "Extra Large")))) +
    geom_bar(stat = "identity", position = "fill") +
    facet_wrap(~ type) + 
    labs(x = "Region of CA", 
         y = "Proportion of Mean Avocados Sold",
         fill = "Avocado Size") +
    scale_x_discrete(guide = guide_axis(n.dodge = 2)) +
    scale_fill_brewer(palette = "Paired") 

#Reference Link(s):
  # https://stackoverflow.com/questions/47025828/change-the-order-of-stacked-fill-columns-in-ggplot2
  # https://stackoverflow.com/questions/72545463/how-to-expand-color-palette-in-ggplot2
```

-   Example 2 - Lab 5, Time Series Plot, Question 4

```{r dvs-2-2}
surveys |>
  group_by(year, genus) |>
  summarize(Mean_Weight = mean(weight), .groups = 'drop') |>
  ggplot(mapping = aes(y = Mean_Weight,
                       x = year,
                       color = fct_reorder(genus, -Mean_Weight))) +
    geom_line() +
    labs(x = "Year", y = NULL, color = "Genus of Animal",
         title = "Mean Weights (Grams) for Each Animal's Genus per Year ", 
         subtitle = "Taken From the 'surveys' Data Set")

#Code revised using provided canvas observations
```

**DVS-3: I show creativity in my visualizations**

-   Example 1 - Lab 7, Part 1, Question 2

```{r dvs-3-1}

BlackfootFish <- BlackfootFish |>
  mutate(
      trip = fct_recode(as.factor(trip), 
                               "Trip 1" = "1",
                               "Trip 2" = "2")
  )

BlackfootFish |>
  group_by(year, trip, section) |>
  select(
    where(~ sum(is.na(.x)) > 0)
  ) |>
  summarize(
    across(
      .cols = everything(),
      ~ sum(is.na(.x))
    ), 
    .groups = 'drop'
  ) |>
  ggplot(mapping = aes(x = year, y = weight, color = section)) +
  geom_point() + 
  geom_segment(aes(yend = 0, xend = year)) +
  facet_wrap(trip ~ section) +
  labs(x = "Year", y = "Weight of Fish") +
  theme(legend.position="none")
```

-   Example 2 -- Lab 5, Time Series Plot, Question 4

```{r dvs-3-2}
surveys |>
  group_by(year, genus) |>
  summarize(Mean_Weight = mean(weight), .groups = 'drop') |>
  ggplot(mapping = aes(y = Mean_Weight,
                       x = year,
                       color = fct_reorder(genus, -Mean_Weight))) +
    geom_line() +
    labs(x = "Year", y = NULL, color = "Genus of Animal",
         title = "Mean Weights (Grams) for Each Animal's Genus per Year ", 
         subtitle = "Taken From the 'surveys' Data Set")

#Code revised using provided canvas observations
```

**DVS-4: I can calculate numerical summaries of variables.**

-   Example 1 - Lab/ Challenge 9, Question 9

```{r dvs-4-1}
allens |>
  filter(Year == 2000, 
         State == 'PA' | State == 'CA') |>
  group_by(State) |>
  summarize(Name, Count,
            .groups = 'drop') |>
  pivot_wider(names_from = Name,
              values_from = Count, 
              values_fill = 0) |>
  gt()

```

-   Example 2 - Lab 3, Question 11

```{r dvs-4-2}

filtered <- hiphop_clean |> 
  filter(age < 20) |> 
    group_by(word) |>
      summarize(Average_Familiarity = mean(familiarity))
          
slice_max(filtered, Average_Familiarity)
slice_min(filtered, Average_Familiarity)
```

**DVS-5: I can find summaries of variables across multiple groups.**

-   Example 1 - Lab/Challenge 9, Question 1

```{r dvs-5-1}

stateNames |>
  filter(Name == 'Allison') |>
  group_by(State, sex) |>
  summarize(n = sum(Count),
            .groups = 'drop') |>
  pivot_wider(names_from = sex,
              values_from = n, 
              values_fill = 0) |>
  gt() |>
  cols_label(F = "Female",
             M = "Male") |>
  tab_header(title = "Number of Babies Born with the Name 'Allison' Born in Each State") |>
  tab_options(row.striping.include_table_body = FALSE) %>%
  tab_style(
    style = cell_borders(
      sides = "all",
      color = "lightgreen",
      weight = px(4),
      style = "solid"
    ),
    locations = cells_body(
      columns = everything(),
      rows = everything()
    )
  )
```

-   Example 2 - Lab 7, Question 2

```{r dvs-5-2}

BlackfootFish |>
  group_by(year, trip, section) |>
  select(
    where(~ sum(is.na(.x)) > 0)
  ) |>
  summarize(
    across(
      .cols = everything(),
      ~ sum(is.na(.x))
    ), 
    .groups = 'drop'
  ) |>
  ggplot(mapping = aes(x = year, y = weight, color = section)) +
  geom_point() + 
  geom_segment(aes(yend = 0, xend = year)) +
  facet_wrap(trip ~ section) +
  labs(x = "Year", y = "Weight of Fish") +
  theme(legend.position="none")
```

**DVS-6: I can create tables which make my summaries clear to the reader.**

-   Example 1 - Lab/Challenge 9, Question 1

```{r dvs-6-1}

stateNames |>
  filter(Name == 'Allison') |>
  group_by(State, sex) |>
  summarize(n = sum(Count),
            .groups = 'drop') |>
  pivot_wider(names_from = sex,
              values_from = n, 
              values_fill = 0) |>
  gt() |>
  cols_label(F = "Female",
             M = "Male") |>
  tab_header(title = "Number of Babies Born with the Name 'Allison' Born in Each State") |>
  tab_options(row.striping.include_table_body = FALSE) %>%
  tab_style(
    style = cell_borders(
      sides = "all",
      color = "lightgreen",
      weight = px(4),
      style = "solid"
    ),
    locations = cells_body(
      columns = everything(),
      rows = everything()
    )
  )
```

-   Example 2

```{r dvs-6-2}

allens |>
  filter(Year == 2000, 
         State == 'PA' | State == 'CA') |>
  group_by(State) |>
  summarize(Name, Count,
            .groups = 'drop') |>
  pivot_wider(names_from = Name,
              values_from = Count, 
              values_fill = 0) |>
  gt()
```

**DVS-7: I show creativity in my tables.**

-   Example 1 - Lab/Challenge 9, Question 1

```{r dvs-7-1}

stateNames |>
  filter(Name == 'Allison') |>
  group_by(State, sex) |>
  summarize(n = sum(Count),
            .groups = 'drop') |>
  pivot_wider(names_from = sex,
              values_from = n, 
              values_fill = 0) |>
  gt() |>
  cols_label(F = "Female",
             M = "Male") |>
  tab_header(title = "Number of Babies Born with the Name 'Allison' Born in Each State") |>
  tab_options(row.striping.include_table_body = FALSE) %>%
  tab_style(
    style = cell_borders(
      sides = "all",
      color = "lightgreen",
      weight = px(4),
      style = "solid"
    ),
    locations = cells_body(
      columns = everything(),
      rows = everything()
    )
  )
```

-   Example 2

```{r dvs-7-2}

allens |>
  filter(Year == 2000, 
         State == 'PA' | State == 'CA') |>
  group_by(State) |>
  summarize(Name, Count = Count / sum(Count),
            .groups = 'drop') |>
  pivot_wider(names_from = Name,
              values_from = Count, 
              values_fill = 0) |>
  gt() |>
  fmt_percent(columns = c(Alan:Allan),
              decimals = 2)
```

## Program Efficiency

**PE-1: I can write concise code which does not repeat itself.**

Using a single function call

-   Lab/ Challenge 8, Question 5

```{r pe-1-one-call}

rescale_column <- function(dataframe, columns){
  stopifnot(is.data.frame(dataframe))
  
  rescaled_dataframe <- dataframe |>
    mutate(
      across(
        .cols = {{columns}},
        ~ rescale_01(.x)
      )
    )
  return(rescaled_dataframe) 
}

```

`across()`

-   Lab 3, Question 5

```{r pe-1-across}

#Change all colums with datatype character to a factor
#Remove all NA values in the numPreferredArtists and numOverallArtists columns
hiphop_clean <- hiphop |> 
  mutate(
    across(.cols = c(word, subj, sex, ethnic), .fns = ~as_factor(.x)), 
    city = replace(city, city == 0, NA),
    county = replace(county, county == 0, NA)
  ) 

hiphop_clean
```

`map()` functions - Lab/Challenge 8, "Step Four: Use Your Functions!"

```{r pe-1-map-1}

song <- map_chr(.x = 1:12, .f = ~ sing_day( xmas2, .x , Full.Phrase)) |>
  cat()
```

**PE-2: I can write functions to reduce repetition in my code.**

-   Example 1 - Lab/ Challenge 8, pluralize_gift() function

```{r pe2-1}

pluralize_gift <- function(gift){

gift <- case_when(str_detect(gift, "oo") ~ str_replace(gift, "oo", "ee"),
                  str_detect(gift, "y$") ~ str_replace(gift, "y$", "ies"),
                  .default = glue("{gift}s"))
  
return(gift)

}
```

-   Example 2 - Lab/Challenge 8, sing_day() function

```{r pe2-2}

# Produces the string for one day of the song.
# Arguments -- dataset: A data frame containing information about gifts
# Arguments -- line: The number of the line for the day you want to sing about
# Arguments -- phrase_col: The variable name for the column in the dataset that contains the song phrases
# Return -- A string singing the line of the song with all gifts for the given day.

sing_day <- function(dataset, line, phrase_col){
  
  stopifnot(line > 0)
  # Step 1: Setup the intro line
  # Hint: You need to convert a number (e.g., 1) to a word (e.g., first)
  num_word <- ordinal(line)
  
  intro <- glue::glue("On the {num_word} day of Christmas, my true love sent to me:")
  
  # Step 2: Sing the gift phrases

  phrases <- dataset |>
    pull({{phrase_col}})
  
  if(line > 1)
      phrases[2] <- str_c( phrases[2], "and", sep = " ")
  
  phrases[1] <- str_c( phrases[1], ".")
    
  phrases <- rev(phrases)
  phrases <- phrases[length(phrases) - line + 1  : line]
  
    
  ## put it together
  phrases <- str_flatten(phrases, collapse = "\n")
  day_line <- str_c(intro, phrases,
                    sep = "\n\n")

  return(day_line)
}

```

**PE-3: I can use iteration to reduce repetition in my code.**

`across()`

-   Lab 4, Question 2

```{r pe-3-across}

#Renaming columns that use PLU as their name
avocado_clean <- avocado |> 
  rename(Small_Hass = `4046`, 
         Large_Hass = `4225`,
         Extra_Large_Hass = `4770`)

#Getting all major regions within the avocado data set
majorRegions <- tibble(region = c("Midsouth", 
                                  "Northeast",
                                  "SouthCentral",
                                  "Southeast",
                                  "West")
                      )

#Getting all minor regions within the avocado data set
minorRegions <- tibble(region = c("GreatLakes",
                                  "GrandRapids",
                                  "NorthernNewEngland",
                                  "Plains")
                      )

#Separating data into two tibbles based on major region and state
avocado_major_regions <- semi_join(x = avocado_clean, y = majorRegions, by = "region")
avocado_states <- anti_join(x = avocado_clean, y = majorRegions, by = "region")

#Making type and region columns as factors
avocado_clean <- avocado_clean |>
  mutate(
    across(.cols = c(type, region), .fns = ~as.factor(.x))
  )

#Making type and region columns as factors
avocado_states <- avocado_states |>
  mutate(
    across(.cols = c(type, region), .fns = ~as.factor(.x))
  )

#Making type and region columns as factors
avocado_major_regions <- avocado_major_regions |>
  mutate(
    across(.cols = c(type, region), .fns = ~as.factor(.x))
  )
                               

```

`map()` functions (Provide 2 Examples)

-   Example 1 - Lab/Challenge 8, "Step Four: Use Your Functions!"

```{r pe-3-map-1}
song <- map_chr(.x = 1:12, .f = ~ sing_day( xmas2, .x , Full.Phrase)) |>
  cat()
```

-   Example 2 - Lab/Challenge 8, make_phrase() - "Test Your Function"

```{r pe-3-map-2}

xmas2 <- xmas %>%
  mutate(Full.Phrase = pmap_chr(.l = list(Day,
                                          Day.in.Words,
                                          Gift.Item,
                                          Verb, 
                                          Adjective,
                                          Location),
                                .f = make_phrase)
         )
```

**PE-4: I can use modern tools when carrying out my analysis.**

-   Example 1 - Lab/ Challenge 9, Question 1

```{r pe-4-1}

stateNames |>
  filter(Name == 'Allison') |>
  group_by(State, sex) |>
  summarize(n = sum(Count),
            .groups = 'drop') |>
  pivot_wider(names_from = sex,
              values_from = n, 
              values_fill = 0) |>
  gt() |>
  cols_label(F = "Female",
             M = "Male") |>
  tab_header(title = "Number of Babies Born with the Name 'Allison' Born in Each State") |>
  tab_options(row.striping.include_table_body = FALSE) %>%
  tab_style(
    style = cell_borders(
      sides = "all",
      color = "lightgreen",
      weight = px(4),
      style = "solid"
    ),
    locations = cells_body(
      columns = everything(),
      rows = everything()
    )
  )
  
#Refrence:
#https://gt.rstudio.com/reference/cell_borders.html
  
```

-   Example 2 - Lab 4, Question 5

```{r pe-4-2}

#Get 5 metro regions with highest total sales of avocados
  anti_join(x = avocado_clean, y = majorRegions, by = "region") |>
  anti_join(y = minorRegions, by = "region") |>
  filter(region != "California", region != "TotalUS") |>
  group_by(region) |>
  summarize(AverageVolume = mean(`Total Volume`)) |>
  slice_max(order_by = AverageVolume, n = 5) |>
  mutate(region = as.character(region)) |>
  left_join( y = avocado_clean, by = "region") |>
  ggplot(mapping = aes(x = `Total Volume`, y = region, fill = region)) +
    geom_boxplot() + 
    labs(x = "Total Volume of Avocados Sold", y = "Metro Region" )
```

## Data Simulation & Modeling

**DSM-1: I can simulate data from a *variety* of probability models.**

-   Example 1 - Practice Activity 9.2, Catching a Con

```{r dsm-1-1}

set.seed(1957)

music_man <- function(n_tromb, n_cor, n_reed){
  
  trombones <- rnorm(n_tromb, mean = 4.6, sd = 0.8)
  cornets <- runif(n_cor, min = 1.5, max = 3.5)
  reeds <- rchisq(n_reed, df = 4)
  total_weight <- sum(trombones) + sum(cornets) + sum(reeds)
  return(total_weight)
  
}

my_weights <- map_dbl(.x = 1:1000, 
                      .f = ~ music_man(n_tromb = 76, n_cor = 110, n_reed = 1035)
                      ) 
```

-   Example 2 - Practice Activity 9.2, Warm Up

```{r dsm-1-2}

random <- rnorm(n = 100, mean = 4.6, sd = 0.8)

sum(random < 4)
```

**DSM-2: I can fit a linear regression and extract necessary summary measures.**

-   Example 1 - Lab 9, Questions 4 & 6

```{r dsm-2-1}

allison_lm <- allison_f |>
  group_by(Year) |>
  summarize(`Births per Year` = sum(Count)) |>
  lm(`Births per Year` ~ Year, data = _)

allison_lm |>
  broom::augment() |>
  ggplot(mapping = aes(y = .resid, x = .fitted)) +
  geom_point()
```

-   Example 2 - Practice Activity 9.1, Questions 1 & 2

```{r dsm-2-2}

mystery <- mystery |>
  lm(weight_after ~ weight_before, data = _) 

broom::augment(mystery) |>
  ggplot(mapping = aes(y = .resid, x = .fitted)) +
  geom_point()
```

## Revising My Thinking

<!-- How did you revise your thinking throughout the course? How did you revise your thinking on the code examples you have provided in your portfolio? -->

-   I take any critiques and mistakes I get from the labs and challenges to heart. I try my best to redo everything that I can so that I fully understand what I did wrong and prevent those mistakes for future assignments and projects in R. I also read all required readings to best understand the topics each week and am prepared for the explanations of said topics during the first hour of each class period. By doing this, I believe that I am improving and meeting the learning topic more often for each assignment. This is apparent above where I listed many questions from labs and challenges 3, 4, and 5 as I am making my answers more organized and more concise through my code.

## Extending My Thinking

<!-- How did you extended your thinking throughout the course? How did you extend your thinking on the code examples you have provided in your portfolio? -->

-   When I do not understand a particular topic, I search it up on Google and try to find how it can be applied. If I don't understand a certain function, I will typically look it up in documentation and see what I can learn from there and then use Google if I still don't understand it.

-   When I get errors on my code and cannot easily fix them, I look on Stack Overflow or some other website to see if someone else has had the same issue as me in the past. If I can find a thread that can solve my issue, I will always link it as a comment in the respective question's code chunk.

## Peer Support & Collaboration

<!-- Include an image of feedback you gave that you are proud of (either in a peer review or in Discord) -->

(Im guido on Discord by the way)

![](supporting_artifacts/Screenshot%202023-02-19%20at%2011.12.48%20AM.png)
